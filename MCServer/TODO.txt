#include "include/rapidjson/document.h"
#include "include/rapidjson/prettywriter.h"
#include "include/rapidjson/stringbuffer.h"
#include <locale.h>

void loadConfigv1() {
    const string path = "plugins/Wheat/Config.config";

    std::ifstream getinfo;
    getinfo.open(path, std::ios::in);
    string infoCheck;
    while (!getinfo.eof()) {
        getinfo >> infoCheck;
        if      (infoCheck == "hostURL"         ) getinfo >> hostURL;
        else if (infoCheck == "serverName"      ) getinfo >> serverName;
        else if (infoCheck == "WS.hostURL"      ) getinfo >> ws_hostURL;
        else if (infoCheck == "WS.key"          ) getinfo >> ws_key;
        else if (infoCheck == "WS.timeOut"      ) getinfo >> ws_timeOut;
        else if (infoCheck == "syn.autoSaveTime") getinfo >> syn_autoSaveTime;
        else if (infoCheck == "syn.NBT"         ) getinfo >> syn_NBT;
        else if (infoCheck == "syn.scores"      ) getinfo >> syn_scores;
        else if (infoCheck == "syn.tags"        ) getinfo >> syn_tags;
        else if (infoCheck == "syn.message"     ) getinfo >> syn_message;
        else if (infoCheck == "syn.money"       ) getinfo >> syn_money;
        else if (infoCheck == "syn.moneyType"   ) getinfo >> syn_moneyType;
        else if (infoCheck == "syn.moneyName"   ) getinfo >> syn_moneyName;
    }
    getinfo.close();

    if (hostURL    == "error"  ) hostURL     = "localhost";
    if (serverName == "error"  ) serverName  = "default";
    if (ws_hostURL == "error"  ) ws_hostURL  = "ws://localhost/ws/asset";
    if (ws_key     == "error"  ) ws_key      = "key";
    if (ws_timeOut       == -1 ) ws_timeOut       = 15;
    if (syn_autoSaveTime == -1 ) syn_autoSaveTime = 5;
    if (syn_NBT     == NULL    ) syn_NBT     = true;
    if (syn_scores  == NULL    ) syn_scores  = true;
    if (syn_tags    == NULL    ) syn_tags    = true;
    if (syn_message == NULL    ) syn_message = true;
    if (syn_money   == NULL    ) syn_money   = true;
    if (syn_moneyType == "error") syn_moneyType = "score";
    if (syn_moneyName == "error") serverName    = "money";

    std::ofstream writeConfig;
    writeConfig.open(path, std::ios::out);
    writeConfig << config_toString();
    writeConfig.close();
}

// 需包含locale、string头文件、使用setlocale函数。
std::wstring StringToWstring(const std::string str)
{// string转wstring
    unsigned len = str.size() * 2;// 预留字节数
    setlocale(LC_CTYPE, "");     //必须调用此函数
    wchar_t* p = new wchar_t[len];// 申请一段内存存放转换后的字符串
    mbstowcs(p, str.c_str(), len);// 转换
    std::wstring str1(p);
    delete[] p;// 释放申请的内存
    return str1;
}

string WstringToString(const std::wstring str)
{// wstring转string
    unsigned len = str.size() * 4;
    setlocale(LC_CTYPE, "");
    char* p = new char[len];
    wcstombs(p, str.c_str(), len);
    std::string str1(p);
    delete[] p;
    return str1;
}
Logger logger("Wheat");




// TODO: Load json
void loadJsonConfig(string path, string name) {
    std::ifstream fs;
    fs.open(path + "/" + name, std::ios::in);
    if (!fs) {
        logger.info(path + "/" + name + " not found, start with default configuration.");
        std::filesystem::create_directory("path");
        std::ofstream of(path + "/" + name);
        if (of) {

            of << " ";
        }
        else {
            logger.error("Configuration file creation failed");
        }
    }
    else {
        std::string json;
        char buf[1024];
        while (fs.getline(buf, 1024)) {
            json.append(buf);
        }
        rapidjson::Document document;
        document.Parse(json.c_str());
        // Web socket
        if (document.HasMember("WebSocket") && document["WebSocket"].IsObject()) {
            static const char* kTypeNames[] =
            { "Null", "False", "True", "Object", "Array", "String", "Number" };
            for (rapidjson::Value::ConstMemberIterator itr = document.MemberBegin()
                ; itr != document.MemberEnd(); ++itr) {
                printf("Type of member %s is %s\n",
                    itr->name.GetString(), kTypeNames[itr->value.GetType()]);
            }
            document["WebSocket"].MemberBegin();


        }
        else {
            logger.error("Config WebSocket not found");
        }
        if (document.HasMember("hostURL"))    hostURL = document["hostURL"].GetString();
        else logger.warn("Config hostURL not found");
        if (document.HasMember("WSHostURL"))    WSHostURL = document["WSHostURL"].GetString();
        else logger.warn("Config WSHostURL not found");
        if (document.HasMember("key"))    key = document["key"].GetString();
        else logger.warn("Config key not found");
        if (document.HasMember("serverName"))   serverName = document["serverName"].GetString();
        else logger.warn("Config serverName not found");
        if (document.HasMember("timeOut"))      timeOut = document["timeOut"].GetInt();
        else logger.warn("Config timeOut not found");
        if (document.HasMember("autoSaveTime")) hostURL = document["autoSaveTime"].GetInt();
        else logger.warn("Config autoSaveTime not found");
        // Synchronize
        if (document.HasMember("synNBT"))        synNBT = document["synNBT"].GetBool();
        else logger.warn("Config synNBT not found");
        if (document.HasMember("synScores"))        synScores = document["synScores"].GetBool();
        else logger.warn("Config synScores not found");
        if (document.HasMember("synTags"))        synTags = document["synTags"].GetBool();
        else logger.warn("Config synTags not found");
        if (document.HasMember("synMessage"))        synNBT = document["synMessage"].GetBool();
        else logger.warn("Config synMessage not found");
        if (document.HasMember("synMoney"))        synNBT = document["synMoney"].GetBool();
        else logger.warn("Config synMoney not found");
        if (document.HasMember("synMoneyType")) serverName = document["synMoneyType"].GetString();
        else logger.warn("Config synMoneyType not found");
        if (document.HasMember("synMoneyName")) serverName = document["synMoneyName"].GetString();
        else logger.warn("Config synMoneyName not found");
    }
}






void loadIniConfig() {
    LPTSTR lpPath = (LPTSTR)(LPCTSTR)"plugins/Wheat/Config.ini";
    LPTSTR tempStr = (LPTSTR)(LPCTSTR)"config";
    // strcpy(lpPath, "plugins/Wheat/Config.ini");

    // Web socket
    GetPrivateProfileString(L"WebSocket", L"hostURL", L"localhost", tempStr, 64, lpPath);
    std::wstring temp = tempStr;
    hostURL = WstringToString(temp);
    //GetPrivateProfileString(L"WebSocket", L"WSHostURL", L"ws://localhost/ws/asset", tempStr, 64, lpPath);
    //WSHostURL = convertLPTSTR(tempStr);
    //GetPrivateProfileString(L"WebSocket", L"key", L"key", tempStr, 64, lpPath);
    //key       = convertLPTSTR(tempStr);
    //GetPrivateProfileString(L"WebSocket", L"serverName", L"default", tempStr, 64, lpPath);
    //serverName = convertLPTSTR(tempStr);
    //timeOut = GetPrivateProfileInt(L"WebSocket", L"timeOut", 15, lpPath);

    //// Synchronize
    //autoSaveTime = GetPrivateProfileInt(L"Synchronize", L"autoSaveTime", 5, lpPath);
    //GetPrivateProfileString(L"Synchronize", L"synNBT", L"true", tempStr, 64, lpPath);
    //    synNBT = (tempStr == L"true");
    //GetPrivateProfileString(L"Synchronize", L"synScores", L"true", tempStr, 64, lpPath);
    //    synScores = (tempStr == L"true");
    //GetPrivateProfileString(L"Synchronize", L"synTags", L"true", tempStr, 64, lpPath);
    //    synTags = (tempStr == L"true");
    //GetPrivateProfileString(L"Synchronize", L"synMessage", L"true", tempStr, 64, lpPath);
    //    synMessage = (tempStr == L"true");
    //GetPrivateProfileString(L"Synchronize", L"synMoney", L"true", tempStr, 64, lpPath);
    //    synMoney = (tempStr == L"true");
    //GetPrivateProfileString(L"Synchronize", L"synMoneyType(score/ll)", L"score", tempStr, 64, lpPath);
    //    synMoneyType = convertLPTSTR(tempStr);
    //GetPrivateProfileString(L"Synchronize", L"synMoneyName", L"money", tempStr, 64, lpPath);
    //    synMoneyName = convertLPTSTR(tempStr);

    // Web socket
    //WritePrivateProfileString("WebSocket", "hostURL", "localhost", lpPath);
    //WritePrivateProfileString("WebSocket", "WSHostURL", "ws://localhost/ws/asset", lpPath);
    //WritePrivateProfileString("WebSocket", "key", "key", lpPath);
    //WritePrivateProfileString("WebSocket", "serverName", "default", lpPath);
    //WritePrivateProfileString("WebSocket", "timeOut", "15", lpPath);
    // Synchronize
    //WritePrivateProfileString("Synchronize", "autoSaveTime", "5", lpPath);
    //WritePrivateProfileString("Synchronize", "synNBT", "true", lpPath);
    //WritePrivateProfileString("Synchronize", "synScores", "true", lpPath);
    //WritePrivateProfileString("Synchronize", "synTags", "true", lpPath);
    //WritePrivateProfileString("Synchronize", "synMessage", "true", lpPath);
    //WritePrivateProfileString("Synchronize", "synMoney", "true", lpPath);
    //WritePrivateProfileString("Synchronize", "synMoneyType(score/ll)", "score", lpPath);
    //WritePrivateProfileString("Synchronize", "synMoneyName", "money", lpPath);
    delete[] lpPath;
}